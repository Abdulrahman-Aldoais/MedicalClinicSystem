// <auto-generated />
using System;
using MedicalClinicSystem.EF.Contex;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalClinicSystem.EF.Migrations
{
    [DbContext(typeof(MedicalClinicContext))]
    [Migration("20231203193106_YourMigrationName")]
    partial class YourMigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Doctorpatient", b =>
                {
                    b.Property<string>("DoctorsNavId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PatientsId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsNavId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("Doctorpatient");
                });

            modelBuilder.Entity("MedicalClinicSystem.EF.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "myschema");

                    b.HasData(
                        new
                        {
                            Id = "56508bd7-661c-4f12-907e-e814b101da5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23434f7f-3bc1-4025-a0c1-1380386f02f0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Pass = "3D8DB33C393A0A6B7FD67A822C6F9961768EAA94EB0185AA20825FD700EBC007",
                            PasswordHash = "3D8DB33C393A0A6B7FD67A822C6F9961768EAA94EB0185AA20825FD700EBC007",
                            PhoneNumberConfirmed = false,
                            Salt = "12/3/2023 10:31:05 PM",
                            SecurityStamp = "c7a54c5e-b100-409d-873a-900f9696115b",
                            TwoFactorEnabled = false,
                            UserName = "abdulrahman@exe.com"
                        });
                });

            modelBuilder.Entity("MedicalClinicSystem.EF.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalClinicSystem.EF.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgePatient")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorsNavId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.Property<string>("Not")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientsNavId")
                        .HasColumnType("int");

                    b.Property<string>("RescriptionMedications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorsNavId");

                    b.HasIndex("PatientsNavId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("MedicalClinicSystem.EF.Models.patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 23,
                            DateTime = new DateTime(2023, 12, 3, 22, 31, 5, 712, DateTimeKind.Local).AddTicks(4219),
                            Gender = " ",
                            Name = "احمد خالد",
                            Phone = "773453534"
                        });
                });

            modelBuilder.Entity("Doctorpatient", b =>
                {
                    b.HasOne("MedicalClinicSystem.EF.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsNavId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalClinicSystem.EF.Models.patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalClinicSystem.EF.Models.MedicalRecord", b =>
                {
                    b.HasOne("MedicalClinicSystem.EF.Models.Doctor", "DoctorsNav")
                        .WithMany()
                        .HasForeignKey("DoctorsNavId");

                    b.HasOne("MedicalClinicSystem.EF.Models.patient", "PatientsNav")
                        .WithMany("MedicalRecordsNav")
                        .HasForeignKey("PatientsNavId");

                    b.Navigation("DoctorsNav");

                    b.Navigation("PatientsNav");
                });

            modelBuilder.Entity("MedicalClinicSystem.EF.Models.patient", b =>
                {
                    b.Navigation("MedicalRecordsNav");
                });
#pragma warning restore 612, 618
        }
    }
}
